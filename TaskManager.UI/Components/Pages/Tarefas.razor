@page "/tarefas"
@using TaskManager.UI.Services
@using TaskManager.Shared
@rendermode InteractiveServer
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AppState AppState

<h3>Lista de Tarefas</h3>

@if (!carregado)
{
    <p>Carregando tarefas...</p>
}
else
{
    <div class="row mb-3">
        <div class="col-md-4 mb-2">
            <input type="text"
            class="form-control"
            placeholder="Buscar por título..."
            @bind-value="termoBusca"
            @bind-value:event="oninput" />
        </div>

        <div class="col-md-3 mb-2">
            <select class="form-select" @bind="filtroDificuldade">
                <option value="">Todas as dificuldades</option>
                <option value="Baixa">Baixa</option>
                <option value="Média">Média</option>
                <option value="Alta">Alta</option>
            </select>
        </div>

        <div class="col-md-3 mb-2">
            <select class="form-select" @bind="filtroStatus">
                <option value="">Todos os status</option>
                <option value="pendente">Pendente</option>
                <option value="concluida">Concluída</option>
            </select>
        </div>

        <div class="col-md-4 mb-2">
            <select class="form-select" @bind="filtroResponsavelId">
                <option value="0">Todos os responsáveis</option>
                @foreach (var user in usuarios)
                {
                    <option value="@user.Id">@user.Username</option>
                }
            </select>
        </div>

    </div>

    @if (!TarefasFiltradas.Any())
    {
        <p>Nenhuma tarefa encontrada.</p>
    }
    else
    {
        <div class="accordion" id="accordionTarefas">
            @foreach (var tarefa in TarefasFiltradas)
            {
                var tarefaId = $"tarefa-{tarefa.Id}";
                var isEditando = tarefaEditando?.Id == tarefa.Id;

                <div class="accordion-item mb-2">
                    <h2 class="accordion-header" id="@($"{tarefaId}-header")">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="form-check ms-3">
                                <input class="form-check-input"
                                       type="checkbox"
                                       checked="@tarefa.Concluida"
                                       @onchange="(e => AlterarStatusTarefa(tarefa, e.Value))"
                                       disabled="@(AppState.IsAdmin == false)" />
                                <label class="form-check-label fw-bold">
                                    @tarefa.Titulo
                                </label>
                            </div>
                            <button class="accordion-button collapsed w-50" type="button" data-bs-toggle="collapse" data-bs-target="#@($"{tarefaId}-body")" aria-expanded="false" aria-controls="@($"{tarefaId}-body")">
                                Ver detalhes
                            </button>
                        </div>
                    </h2>

                    <div id="@($"{tarefaId}-body")" class="accordion-collapse collapse" aria-labelledby="@($"{tarefaId}-header")" data-bs-parent="#accordionTarefas">
                        <div class="accordion-body">
                            @if (isEditando)
                            {
                                <div>
                                    <div class="mb-2">
                                        <label>Título:</label>
                                        <input class="form-control" @bind="tarefaEditando.Titulo" />
                                    </div>
                                    <div class="mb-2">
                                        <label>Descrição:</label>
                                        <textarea class="form-control" @bind="tarefaEditando.Descricao"></textarea>
                                    </div>
                                    <div class="mb-2">
                                        <label>Dificuldade:</label>
                                        <input class="form-control" @bind="tarefaEditando.Dificuldade" />
                                    </div>
                                    <div class="mb-2">
                                        <label>Data de Entrega:</label>
                                        <input type="date" class="form-control" @bind="tarefaEditando.DataEntrega" />
                                    </div>
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" @bind="tarefaEditando.Concluida" />
                                        <label class="form-check-label">Concluída</label>
                                    </div>

                                    @if (AppState.IsAdmin)
                                    {
                                        <button class="btn btn-success me-2" @onclick="SalvarEdicao">Salvar</button>
                                        <button class="btn btn-secondary" @onclick="CancelarEdicao">Cancelar</button>
                                    }
                                </div>
                            }
                            else
                            {
                                <p><strong>Descrição:</strong> @tarefa.Descricao</p>
                                <p><strong>Data de Entrega:</strong> @(tarefa.DataEntrega?.ToString("dd/MM/yyyy") ?? "Não definida")</p>
                                <p><strong>Dificuldade:</strong> @tarefa.Dificuldade</p>

                                @if (AppState.IsAdmin)
                                {
                                    <button class="btn btn-outline-primary me-2" @onclick="@(() => EditarTarefa(tarefa))">Editar</button>
                                }

                                <button class="btn btn-outline-danger" @onclick="@(() => ApagarTarefa(tarefa.Id))">Apagar</button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (AppState.IsAdmin)
        {
            <div class="mt-3">
                <button class="btn btn-success" @onclick="SalvarAlteracoesConcluidas" disabled="@(!tarefasModificadas.Any())">
                    Salvar Alterações
                </button>
            </div>
        }
    }
}

@code {
    private List<Tarefa> tarefas = new();
    private bool carregado = false;

    //Edições (admin)
    private Tarefa? tarefaEditando;
    private List<Tarefa> tarefasModificadas = new();
    private void EditarTarefa(Tarefa tarefa)
    {
        tarefaEditando = new Tarefa
            {
                Id = tarefa.Id,
                Titulo = tarefa.Titulo,
                Descricao = tarefa.Descricao,
                Dificuldade = tarefa.Dificuldade,
                DataEntrega = tarefa.DataEntrega,
                Concluida = tarefa.Concluida,
                ResponsavelId = tarefa.ResponsavelId
            };
    }

    private void CancelarEdicao()
    {
        tarefaEditando = null;
    }

    private async Task SalvarEdicao()
    {
        if (tarefaEditando is not null)
        {
            var sucesso = await AuthService.UpdateTarefaAsync(tarefaEditando);

            if (sucesso)
            {
                // Atualiza a tarefa na lista local
                var index = tarefas.FindIndex(t => t.Id == tarefaEditando.Id);
                if (index >= 0)
                {
                    tarefas[index] = tarefaEditando;
                }

                tarefaEditando = null;
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Erro ao salvar tarefa.");
            }
        }
    }

    private async Task ApagarTarefa(int id)
    {
        var confirmar = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja apagar esta tarefa?");
        if (confirmar)
        {
            var sucesso = await AuthService.DeleteTarefaAsync(id);

            if (sucesso)
            {
                tarefas = tarefas.Where(t => t.Id != id).ToList();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Erro ao apagar tarefa.");
            }
        }
    }

    private void AlterarStatusTarefa(Tarefa tarefa, object? valor)
    {
        if (valor is bool novaConclusao)
        {
            tarefa.Concluida = novaConclusao;

            if (!tarefasModificadas.Any(t => t.Id == tarefa.Id))
            {
                tarefasModificadas.Add(tarefa);
            }
        }
    }

    private async Task SalvarAlteracoesConcluidas()
    {
        bool erro = false;

        foreach (var tarefa in tarefasModificadas)
        {
            var sucesso = await AuthService.UpdateTarefaAsync(tarefa);
            if (!sucesso)
            {
                erro = true;
            }
        }

        tarefasModificadas.Clear();

        if (erro)
            await JS.InvokeVoidAsync("alert", "Algumas alterações não foram salvas.");
        else
            await JS.InvokeVoidAsync("alert", "Alterações salvas com sucesso.");
    }


    //Filtros
    private string filtroDificuldade = string.Empty;
    private string filtroStatus = string.Empty;
    private int filtroResponsavelId = 0;
    private List<Usuario> usuarios = new();
    private string termoBusca = string.Empty;

    private IEnumerable<Tarefa> TarefasFiltradas =>
    tarefas.Where(t =>
        (string.IsNullOrWhiteSpace(termoBusca) || t.Titulo.Contains(termoBusca, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(filtroDificuldade) || t.Dificuldade.Equals(filtroDificuldade, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(filtroStatus) ||
            (filtroStatus == "concluida" && t.Concluida) ||
            (filtroStatus == "pendente" && !t.Concluida)) &&
        (filtroResponsavelId == 0 || t.ResponsavelId == filtroResponsavelId)
    );


    protected override async Task OnInitializedAsync()
    {
        if (!AppState.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }

        var id = AppState.IsAdmin ? 0 : AppState.UsuarioLogado?.Id ?? 0;
        tarefas = await AuthService.GetTarefasAsync(id);
        usuarios = await AuthService.GetUsuariosAsync();
        carregado = true;
    }

    [Inject] IJSRuntime JS { get; set; }
}
